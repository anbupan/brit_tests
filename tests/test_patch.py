
import pytest
import requests
from playwright.sync_api import sync_playwright

@pytest.fixture(scope="session")
def base_url():
    return "https://api.restful-api.dev"

@pytest.fixture
def update_data():
    return {"name": "Apple MacBook Pro 21"}

@pytest.fixture
def create_data():
    return {
        "name": "Apple MacBook Pro_19",
        "data": {
            "year": 2020,
            "price": 2727.90,
            "CPU model": "Intel Core i9",
            "Hard disk size": "2 TB"
        }
    }
#     To test patch request
@pytest.mark.usefixtures("base_url", "create_data", "update_data")
def test_post_object_1(base_url, create_data, update_data):
    #  POST request to create new object
    posturl = f"{base_url}/objects"
    createdata_response = requests.post(posturl, json=create_data)
    newdata = createdata_response.json()
    newdata_id = newdata.get("id")
    #   GET request to retrieve initial state of object
    geturl = f"{base_url}/objects/{newdata_id}"
    intialstate_response = requests.get(geturl)
    intialstate_response_data = intialstate_response.json()
    intialstate_name = intialstate_response_data.get("name")

    #     patch request to update the object - name and validate the update
    patchurl = f"{base_url}/objects/{newdata_id}"
    afterpatch_response = requests.patch(patchurl, json=update_data)
    afterpatch_response_data = afterpatch_response.json()
    afterpatch_name = afterpatch_response_data.get("name")
    assert intialstate_name != afterpatch_name


#     To test the usage of reserved id for patch request
@pytest.fixture
def reserved_id_error():
    return {
        "error": "7 is a reserved id and the data object of it cannot be overridden. You can create a new object via "
                 "POST request and use new generated by id from it to send a PATCH request."
    }


@pytest.mark.usefixtures("base_url", "create_data", "update_data", "reserved_id_error")
def test_post_object_2(base_url, create_data, update_data, reserved_id_error):
    #   patch request to validate the error when reserved id is used for updating an object
    patchurl = f"{base_url}/objects/7"
    afterpatch_response = requests.patch(patchurl, json=update_data)
    afterpatch_response_data = afterpatch_response.json()
    assert afterpatch_response_data == reserved_id_error